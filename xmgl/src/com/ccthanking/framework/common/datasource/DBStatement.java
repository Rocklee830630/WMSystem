package com.ccthanking.framework.common.datasource;

/**
 * Title:
 * Description:  javax.sql.Statement implementation   shenggj 2002.1.11
 * 需要添加日志处理（使用log4j规范）
 * Copyright:    Copyright (c) 2002
 * Company:
 * @author shenggj
 * @version 1.0
 */

import java.sql.*;

import org.apache.struts.action.PlugIn;

import com.ccthanking.framework.common.datasource.*;

class DBStatement implements Statement{

    /**
     * 执行查询SQL语句，返回单一ResultSet对象,记录日志，调用内部成员变量_stmnt相应方法
     * @param s SQL
     * @return ResultSet
     * @throws SQLException
     */

    public ResultSet executeQuery(String s)

        throws SQLException{

        //   _conn.log(s);

        try{
            ResultSet rs = _stmnt.executeQuery(s);
//		    if(this.isAnalyse()==true){
//		    PerformanceManager pm=PerformanceManager.getInstance();
//		    PerformanceLog pl=pm.getPerformanceLog(Thread.currentThread().getName());
//			pl.addElement("statement executed at:"+new java.lang.Long(System.currentTimeMillis()).toString()+"with:("+s+")");
//			pm.removeLog(Thread.currentThread().getName());
//			}
            return rs;

        }

        catch(SQLException sqlexception){

            throw sqlexception;

        }

    }

    public boolean execute(String sql,
                           String[] columnNames) throws SQLException{

//        return this._stmnt.execute(sql, columnNames);
        return false;

    }

    public boolean execute(String sql,
                           int[] columnIndexes) throws SQLException{

//        return this._stmnt.execute(sql, columnIndexes);
        return false;

    }
    public boolean execute(String sql,
                           int autoGeneratedKeys) throws SQLException{

        return false;
    }
    public int getResultSetHoldability() throws SQLException{

//        return ResultSet.HOLD_CURSORS_OVER_COMMIT; // or ResultSet.CLOSE_CURSORS_AT_COMMIT
          return -1;
    }

    /**
     *  执行 SQL INSERT, UPDATE or DELETE statement,纪录日志，调用内部成员变量_stmnt相应方法
     * @param s SQL
     * @return row count
     * @throws SQLException
     */

    public int executeUpdate(String s)

        throws SQLException{

        try

        {
            int rs = _stmnt.executeUpdate(s);
//	    if(this.isAnalyse()==true){
//		    PerformanceManager pm=PerformanceManager.getInstance();
//		    PerformanceLog pl=pm.getPerformanceLog(Thread.currentThread().getName());
//			pl.addElement("statement executed at:"+new java.lang.Long(System.currentTimeMillis()).toString()+"with:("+s+")");
//			pm.removeLog(Thread.currentThread().getName());
//		}
            return rs;

        }

        catch(SQLException sqlexception)

        {

            throw sqlexception;

        }

    }

    /**
     * 执行返回多ResultSet对象的SQL语句,记录日志，调用内部成员变量_stmnt相应方法
     * @param s SQL
     * @return boolean
     * @throws SQLException
     */

    public boolean execute(String s)

        throws SQLException

    {

        //   _conn.log(s);

        try

        {

            boolean rs = _stmnt.execute(s);
//	  if(this.isAnalyse()==true){
//		    PerformanceManager pm=PerformanceManager.getInstance();
//		    PerformanceLog pl=pm.getPerformanceLog(Thread.currentThread().getName());
//			pl.addElement("statement executed at:"+new java.lang.Long(System.currentTimeMillis()).toString()+"with:("+s+")");
//			pm.removeLog(Thread.currentThread().getName());
//		}
            return rs;

        }

        catch(SQLException sqlexception)

        {

            throw sqlexception;

        }

    }

    /**
     * 立即释放Statment对象的数据库和相关的JDBC资源,调用内部成员变量_stmnt相应方法
     * @throws SQLException
     */

    public void close()

        throws SQLException

    {

        _stmnt.close();

    }

    /**
     * 取回列值允许的最大字节数,调用内部成员变量_stmnt相应方法
     * @return 取回列值允许的最大字节数
     * @throws SQLException
     */

    public int getMaxFieldSize()

        throws SQLException

    {

        return _stmnt.getMaxFieldSize();

    }

    /**
     * 设定取回列值允许的最大字节数,调用内部成员变量_stmnt相应方法
     * @param i 取回列值允许的最大字节数
     * @throws SQLException
     */

    public void setMaxFieldSize(int i)

        throws SQLException

    {

        _stmnt.setMaxFieldSize(i);

    }

    /**
     * 取回一个ResultSet中允许包含的行数的最大值,调用内部成员变量_stmnt相应方法
     * @return 行数的最大值
     * @throws SQLException
     */

    public int getMaxRows()

        throws SQLException

    {

        return _stmnt.getMaxRows();

    }

    /**
     * 设定一个ResultSet中允许包含的行数的最大值,调用内部成员变量_stmnt相应方法
     * @param i 行数的最大值
     * @throws SQLException
     */

    public void setMaxRows(int i)

        throws SQLException

    {

        _stmnt.setMaxRows(i);

    }

    public boolean isAnalyse(){
        return _conn.isAnalyse();
    }

    /**
     * Sets escape processing on or off,调用内部成员变量_stmnt相应方法
     * @param flag
     * @throws SQLException
     */

    public void setEscapeProcessing(boolean flag)

        throws SQLException

    {

        _stmnt.setEscapeProcessing(flag);

    }

    /**
     * 得到Statment执行时等待时间,调用内部成员变量_stmnt相应方法
     * @return timeout
     * @throws SQLException
     */

    public int getQueryTimeout()

        throws SQLException

    {

        return _stmnt.getQueryTimeout();

    }

    /**
     * 设定Statment执行时等待时间,调用内部成员变量_stmnt相应方法
     * @param i timeout
     * @throws SQLException
     */

    public void setQueryTimeout(int i)

        throws SQLException

    {

        _stmnt.setQueryTimeout(i);

    }

    /**
     *如果DBMS和驱动程序都支持的话放弃该Statment,调用内部成员变量_stmnt相应方法
     * @throws SQLException
     */

    public void cancel()

        throws SQLException

    {

        _stmnt.cancel();

    }

    public int executeUpdate(String sql,
                             int[] columnIndexes) throws SQLException{

//        return this._stmnt.executeUpdate(sql, columnIndexes);
        return -1;
    }


    public int executeUpdate(String sql,
                             String[] columnNames) throws SQLException{

//        return this._stmnt.executeUpdate(sql, columnNames);
        return -1;
    }

    public int executeUpdate(String sql,
                             int columnIndexe) throws SQLException{

//        return this._stmnt.executeUpdate(sql, columnIndexe);
        return -1;
    }


    /**
     * 返回该Statment报告的第一个warning,调用内部成员变量_stmnt相应方法
     * @return 第一个warning对象
     * @throws SQLException
     */

    public SQLWarning getWarnings()

        throws SQLException

    {

        return _stmnt.getWarnings();

    }

    /**
     * 清除该Statment对象报告的的所有warning,调用内部成员变量_stmnt相应方法
     * @throws SQLException
     */

    public void clearWarnings()

        throws SQLException

    {

        _stmnt.clearWarnings();

    }

    /**
     * 定义一个SQL游标,调用内部成员变量_stmnt相应方法
     * @param s name
     * @throws SQLException
     */

    public void setCursorName(String s)

        throws SQLException

    {

        _stmnt.setCursorName(s);

    }

    /**
     * 将当前结果作为ResultSet对象返回,调用内部成员变量_stmnt相应方法
     * @return ResultSet
     * @throws SQLException
     */

    public ResultSet getResultSet()

        throws SQLException

    {

        return _stmnt.getResultSet();

    }

    /**
     * 把当前结果作为更新数返回，如果当前结果是一个ResultSet对象或者没有结果，返回-1,调用内部成员变量_stmnt相应方法
     * @return result
     * @throws SQLException
     */

    public int getUpdateCount()

        throws SQLException

    {

        return _stmnt.getUpdateCount();

    }

    /**
     * 转移到下一条结果,调用内部成员变量_stmnt相应方法
     * @return 如果结果为ResultSet返回true
     * @throws SQLException
     */

    public boolean getMoreResults()

        throws SQLException

    {

        return _stmnt.getMoreResults();

    }

    /**
     * Gives the JDBC driver a hint as to the number of rows that should be fetched
     * from the database when more rows are needed,调用内部成员变量_stmnt相应方法
     * @param i rows
     * @throws SQLException
     */

    public void setFetchDirection(int i)

        throws SQLException

    {

        _stmnt.setFetchDirection(i);

    }

    /**
     *Retrieves the direction for fetching rows from database tables
     *that is the default for result sets generated from this Statement object,调用内部成员变量_stmnt相应方法
     * @return rows
     * @throws SQLException
     */

    public int getFetchDirection()

        throws SQLException

    {

        return _stmnt.getFetchDirection();

    }

    /**
     * Retrieves the number of result set rows that is the default fetch size
     * for result sets generated from this Statement object.,调用内部成员变量_stmnt相应方法
     * @param i rows
     * @throws SQLException
     */

    public void setFetchSize(int i)

        throws SQLException

    {

        _stmnt.setFetchSize(i);

    }

    /**
     * Retrieves the number of result set rows that is the default fetch size
     * for result sets generated from this Statement object,调用内部成员变量_stmnt相应方法
     * @return rows
     * @throws SQLException
     */

    public int getFetchSize()

        throws SQLException

    {

        return _stmnt.getFetchSize();

    }

    public ResultSet getGeneratedKeys() throws SQLException{
//        return this._stmnt.getGeneratedKeys();
        return null;
    }

    public boolean getMoreResults(int current) throws SQLException{
//        return this._stmnt.getMoreResults(current);
        return false;
    }

    /**
     * 得到ResultSet对象结果的concurrency,调用内部成员变量_stmnt相应方法
     * @return concurrency
     * @throws SQLException
     */

    public int getResultSetConcurrency()

        throws SQLException

    {

        return _stmnt.getResultSetConcurrency();

    }

    /**
     * 得到Statment生成的Result对象结果类型,调用内部成员变量_stmnt相应方法
     * @return type
     * @throws SQLException
     */

    public int getResultSetType()

        throws SQLException

    {

        return _stmnt.getResultSetType();

    }

    /**
     * 添加一个SQL命令到当前Statment对象的批处理,调用内部成员变量_stmnt相应方法
     * @param s SQL命令
     * @throws SQLException
     */

    public void addBatch(String s)

        throws SQLException

    {

        _stmnt.addBatch(s);

    }

    /**
     * 清空批处理,调用内部成员变量_stmnt相应方法
     * @throws SQLException
     */

    public void clearBatch()

        throws SQLException

    {

        _stmnt.clearBatch();

    }

//    public boolean execute(String sql,
//                           int autoGeneratedKeys) throws SQLException{
//
//        return this._stmnt.execute(sql, autoGeneratedKeys);
//    }

    /**
     * 向数据库提交SQL批处理命令，如执行成功，返回更新数的数组,调用内部成员变量_stmnt相应方法
     * @return 更新数的数组
     * @throws SQLException
     */

    public int[] executeBatch()

        throws SQLException

    {

        return _stmnt.executeBatch();

    }

    /**
     * 返回产成这个Statment的Connection
     * @return Connection
     * @throws SQLException
     */

    public Connection getConnection()

        throws SQLException

    {

        return _conn;

    }

    /**
     * 构造函数
     * @param statement statement对象，其值赋给成员变量_stmnt
     * @param OPConnection OPConnection对象,其值赋给成员变量_conn
     */

    public DBStatement(Statement statement, DBConnection dbconnection)

    {
    	
        _stmnt = null;

        _conn = null;

        _stmnt = statement;

        _conn = dbconnection;

    }

    /**
     * 成员变量_stmnt
     * 用于执行一条SQL语句
     */

    private Statement _stmnt;

    /**
     * 成员变量_conn
     * 到数据库的一条连接
     */

    private DBConnection _conn;

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

}
